text(1.2, upperwhisker, "upper whisker", font = 1)
text(1.2, lowerwhisker, "lower whisker", font = 1)
# margins (bottom, left, top, right)
par(mai = c(b = 0.01, l = 1e-04, t = 0.01, r = 0.1))
# Box-plot located at x=0.8 without frame, with default 1.5 range and outliers
boxplot(nhtemp, at = 0.8, frame = F, range = 1.5, outline = T, yaxt = "n", ylim = c(48, 55))
# Add a y axis
axis(2, pos = 0.5, col.axis = "black", las = 0)
# compute the quartiles and lower&upper fence
lowq = quantile(nhtemp, probs = 0.25)
median = quantile(nhtemp, probs = 0.5)
uppq = quantile(nhtemp, probs = 0.75)
lowerfence = lowq - 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
upperfence = uppq + 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
# Compute the endpoint of each whisker, e.g. the max/min value still within the upper/lower-fence
lowerwhisker = min(nhtemp[nhtemp > lowerfence])
upperwhisker = max(nhtemp[nhtemp < upperfence])
# write description in the Box-Plot
text(1.2, lowq, expression("lower quartile: x"[0.25]), font = 2)
text(1.2, median, expression("median: med x"), font = 2)
text(1.2, uppq, expression("upper quartile: x"[0.75]), font = 2)
text(1.2, upperwhisker, "upper whisker", font = 1)
text(1.2, lowerwhisker, "lower whisker", font = 1)
tidy_source(comments = TRUE, indent = 4)
# creating values a as a sequence from -3 to 3
a = seq(from = -3, to = 3, by = 0.01)
# calculating the densities of these values given the default mean=0 sd=1 normal distribution
b = dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai = c(b = 0.5, l = 0.5, t = 0.5, r = 0.5), font = 4, cex.axis = 1.5)
# axis numeration switched off, line width=2
plot(x = a, y = b, type = "l", ylab = "", xlab = "", axes = F, lwd = "2")
# 2 horizontal lines
abline(h = 0)
abline(v = -1.5, lty = 2)
# create and label x-axis
axis(1, at = -1.5, labels = expression(z[alpha]))
# Filling LEFT
polygon(x = c(-1.5, a[1:151]), y = c(0, 0, b[2:151]), col = "gray94")
# write alpha in the area of interest
text(-1.8, 0.03, expression(alpha), cex = 1.2)
#creating values a as a sequence from -3 to 3
a=seq(from=-3,to=3,by=0.01)
#calculating the densities of these values given the default mean=0 sd=1
#normal distribution
b=dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai=c(b=0.5,l=0.5,t=0.5,r=0.5), font=4, cex.axis=1.5)
# axis numeration switched off, line width=2
plot(x=a,y=b,type='l', ylab="",xlab="", axes=F, lwd="2")
# 2 horizontal lines
abline(h=0)
abline(v=1.5, lty=2)
# create and label x-axis
axis(1, at=1.5, labels=expression(z[1-alpha]))
#Filling LEFT
polygon(x=c(1.5,rev(a[451:601])), y=c(0,0,rev(b[452:601])),col="gray94")
#write alpha in the area of interest
text(1.8,0.03,expression(alpha), cex=1.2)
tidy_source(comments = TRUE, indent = 4)
#creating values a as a sequence from -3 to 3
a=seq(from=-3,to=3,by=0.01)
#calculating the densities of these values given the default mean=0 sd=1
#normal distribution
b=dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai=c(b=0.5,l=0.5,t=0.5,r=0.5), font=4, cex.axis=1.5)
# axis switched off, line width=2
plot(x=a,y=b,type='l', ylab="",xlab="", axes=F, lwd="2")
# 3 vertical lines
abline(h=0)
abline(v=-1.5, lty=2)
abline(v=1.5, lty=2)
# Create and the x-axis, cex for text size
axis(1, at=c(-1.5,1.5), labels=expression(-z[1-frac(alpha,2)]==z[frac(alpha,2)],z[1-frac(alpha,2)]), font=2, cex=2)
# Filling LEFT
polygon(x=c(-1.5,a[1:151]), y=c(0,0,b[2:151]),col="gray94")
# Filling RIGHT
polygon(x=c(1.5,rev(a[451:601])), y=c(0,0,rev(b[452:601])),col="gray94")
# Write alphas in the area of interest
text(-1.8,0.03,expression(frac(alpha,2)), cex=1.1)
text(1.8,0.03,expression(frac(alpha,2)), cex=1.1)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
# ecdf of Formaldehyde$car is a step function
ecdf(Formaldehyde$car)
d = ecdf(Formaldehyde$car)
# axis label setup & margins (bottom, top, left, right)
par(cex.lab = 1.5, mai = c(b = 1, l = 1, t = 0.5, r = 0.5))
# plot ECDF
plot(d, ylab = expression(hat(F)(x)), xlab = "x", main = "")
# Vertical line at Fhat(0.5)
abline(v = 0.5, lty = 2, lwd = 2)
text(0.71, 0.51, expression(hat(F)(0.5)), cex = 1.2)
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab=1.5, mai=c(b=1,l=1,t=0.7,r=0.5))
# histogram with relative frequencies
hist(nhtemp,freq=F,main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))
tidy_source(comments = TRUE, indent = 4)
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab = 1.5, mai = c(b = 1, l = 1, t = 0.7, r = 0.5))
# histogram with relative frequencies
hist(nhtemp, freq = F, main = "", ylab = expression(hat(f)(x)), xlab = expression(x %in% K[i]))
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab=1.5, mai=c(b=1,l=1,t=0.7,r=0.5))
# histogram with relative frequencies with manual setting of intervals
hist(nhtemp,freq=F,breaks=seq(from=47, to=55, by=0.5),main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
#In order to use the variable of the 'longley' data (available data set in R) directly use attach()
attach(longley)
#plotting 'Gross national Product' against the 'number of employed people'
# col=" " specifies the color of the dots and pch specifies the dots
plot(Employed, GNP, col="red",pch=16)
#adding a least-square regression line to the plot; the function lm is used to calculate a linear model
abline(lm(GNP~Employed), col="blue")
#using a grid ; specifying strength of grid with 'lwd= '
grid(lwd=2);
#In order to use the variable of the 'longley' data (available data set in R) directly use attach()
attach(longley)
#plotting 'Gross national Product' against the 'number of employed people'
# col=" " specifies the color of the dots and pch specifies the dots
plot(Employed, GNP, col="red",pch=16)
#adding a least-square regression line to the plot; the function lm is used to calculate a linear model
abline(lm(GNP~Employed), col="blue")
#using a grid ; specifying strength of grid with 'lwd= '
grid(lwd=2)
hist(nhtemp,freq=F,breaks=seq(from=47, to=55, by=0.5),main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))# margins (bottom, left, top, right)
par(mai=c(b=0.01,l=1,t=0.01,r=0.9))
#Pie-Chart with axis text size=1.8
pie(table(chickwts$feed), cex=1.8)
# margins (bottom, left, top, right)
par(mai=c(b=0.01,l=1,t=0.01,r=0.9))
#Pie-Chart with axis text size=1.8
pie(table(chickwts$feed), cex=1.8)
tidy_source(comments = TRUE, indent = 4)
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:\Users\Christoph\Documents\GitHub\BCS"
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
sFileToWriteErrorLog = paste(sPathToWrite, 'ErrorLog.txt', sep = "/")
dir.create(sPathToWrite, showWarnings = TRUE, recursive = FALSE, mode = "0777")
lQEs = list.dirs(path = ".")
lQEs
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs
lQEs = c(lQEs[grep("BCS\\_", lQEs, fixed = T)], lQEs[grep("BCS\\_", lQEs, fixed = T)])
lQEs
grep("BCS\\_", lQEs, fixed = T)
lQEs = list.dirs(path = ".")
grep("BCS\\_", lQEs, fixed = T)
lQEs
grep("BCS\_", lQEs, fixed = T)
grep("BCS_", lQEs, fixed = T)
lQEs = c(lQEs[grep("BCS_", lQEs, fixed = T)])
lQEs
iCounterQEs = 1
paste(sPathToWrite, lQEs[iCounterQEs], sep = "/")
paste(sPathRoot, lQEs[iCounterQEs], sep = "/")
sFileToWrite = paste(sPathRoot, lQEs[iCounterQEs])
paste(sPathRoot, lQEs[iCounterQEs])
setwd(lQEs[iCounterQEs])
getwd()
list.files('.')
?list.files()
lQEs[iCounterQEs]
sub('./', '', lQEs[iCounterQEs])
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
sFileToWriteErrorLog = paste(sPathToWrite, 'ErrorLog.txt', sep = "/")
#setwd(paste(sPathRoot, sPathChapter, sep = ""))
setwd(sPathRoot)
ErrorMsg = try(stop(""), TRUE)
ErrorLog = ""
try(stop(""), TRUE)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
iCounterQEs = 1
setwd(lQEs[iCounterQEs])
sPathFile = sub('./', '', lQEs[iCounterQEs])
list.files('.')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r')
paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
setwd(lQEs[iCounterQEs])
setwd(lQEs[iCounterQEs])
iCounterQEs = 2
setwd(lQEs[iCounterQEs])
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
sFileToWriteErrorLog = paste(sPathToWrite, 'ErrorLog.txt', sep = "/")
#setwd(paste(sPathRoot, sPathChapter, sep = ""))
setwd(sPathRoot)
ErrorMsg = try(stop(""), TRUE)
ErrorLog = ""
try(stop(""), TRUE)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
iCounterQEs = 2
(lQEs[iCounterQEs])
setwd(lQEs[iCounterQEs])
paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
list.files('.')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
?tidy_source
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
sFileToWriteErrorLog = paste(sPathToWrite, 'ErrorLog.txt', sep = "/")
#setwd(paste(sPathRoot, sPathChapter, sep = ""))
setwd(sPathRoot)
ErrorMsg = try(stop(""), TRUE)
ErrorLog = ""
try(stop(""), TRUE)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
iCounterQEs
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
lQEs
paste(sPathRoot, sPathFile, '/')
setwd(paste(sPathRoot, sPathFile, sep = '/')
setwd(paste(sPathRoot, sPathFile, collapse = '/')
paste(sPathRoot, sPathFile, collapse = '/')
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = '')
paste(sPathRoot, sPathFile, sep = '/', collapse = '')
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = ''))
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = ''))
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sPathFile, sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
sPathFile
iCounterQEs
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), '.r', sep =''), sep = '/', collapse = ''))
sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = '')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
lQEs[iCounterQEs]
paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = '')
setwd(sPathRoot)
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = '')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
lQEs[iCounterQEs]
sPathFile
setwd(lQEs[iCounterQEs])
lQEs
sPathRoot
lQEs[iCounterQEs]
sPathFile
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
sPathFile
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
setwd(lQEs[iCounterQEs])
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
sFilePath = paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = '')
sFilePath
sPathFile
paste(sFilePath, sPathFile, sep = '')
paste(sFilePath, sPathFile, sep = '/')
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
sPathFil
sPathFile
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
lQEs[iCounterQEs]
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab = 1.7, mar = c(5.5,4.8,3,2)+0.1, mgp = c(3,1,0), mfrow = c(2, 2), cex.main=(2),
cex.axis = 1.4,mfrow = c(3, 3))
# plots for n=5 and different p
n = 5
s = 0:n
p = 0.1
f = dbinom(x=s,n,p)
plot(s, f, type = "h", main = "n=5   p=0.1", xlab = "x", ylab="Prob.")
n = 5
s = 0:n
p = 0.5
f = dbinom(x=s,n,p)
plot(s, f, type = "h", main = "n=5   p=0.5", xlab = "x", ylab = "Prob.")
n = 5
s = 0:n
p = 0.9
f = dbinom(x = s, n, p)
plot(s, f, type="h", main="n=5   p=0.9", xlab = "x", ylab = "Prob.")
### plots for n=10 and different p
n = 10
s = 0:n
p = 0.1
f = dbinom(x = s, n, p)
plot(s, f, type = "h", main = "n=10   p=0.1", xlab = "x", ylab = "Prob.")
n = 10
s = 0:n
p = 0.5
f = dbinom(x = s, n, p)
plot(s, f, type = "h", main = "n=10   p=0.5", xlab = "x", ylab = "Prob.")
n = 10
s = 0:n
p = 0.9
f = dbinom(x = s, n, p)
plot(s, f, type = "h", main = "n=10   p=0.9", xlab = "x", ylab = "Prob.")
### plots for n=100 and different p
n = 100
s = 0:n
p = 0.1
f = dbinom(x = s, n, p)
plot(s, f, type = "h", main = "n=100   p=0.1", xlab = "x", ylab = "Prob.")
norm = dnorm(x = s, 10, 3)
lines(x = s, norm, col = "dark red")
n = 100
s = 0:n
p = 0.5
f = dbinom(x =s, n, p)
plot(s, f, type = "h", main = "n=100   p=0.5", xlab = "x", ylab = "Prob.")
norm = dnorm(x = s, 50, 5)
lines(x = s, norm, col = "dark red")
n = 100
s = 0:n
p = 0.9
f = dbinom(x = s, n, p)
plot(s, f, type = "h", main = "n=100   p=0.9", xlab = "x", ylab = "Prob.")
norm = dnorm(x = s, 90, 3)
lines(x = s, norm, col = "dark red")
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
lQEs[iCounterQEs]
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
