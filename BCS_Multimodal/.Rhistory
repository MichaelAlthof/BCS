lQEs = c(lQEs[grep(".R", lQEs, fixed = T)], lQEs[grep(".r", lQEs, fixed = T)])
if(length(lQEs) > 1){
stop('Too many Quantlets in folder')
}
lIndTRUE = grepl('TRUE', lQEs, fixed = T)
if (grepl('.R', lQEs, fixed = T)){
QEName = sub('.R', '', lQEs)}
if (grepl('.r', lQEs, fixed = T)){
QEName = sub('.r', '', lQEs)
}
sFileToSavePng = paste(QEFolders[iCounterQEFolders], paste(QEName,".png", sep = ""), sep = "/")
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
QEFolders[iCounterQEFolders]
iCounterQEFolders = 12
lQEs = list.files(path = QEFolders[iCounterQEFolders])
lQEs = c(lQEs[grep(".R", lQEs, fixed = T)], lQEs[grep(".r", lQEs, fixed = T)])
if(length(lQEs) > 1){
stop('Too many Quantlets in folder')
}
lIndTRUE = grepl('TRUE', lQEs, fixed = T)
if (grepl('.R', lQEs, fixed = T)){
QEName = sub('.R', '', lQEs)}
if (grepl('.r', lQEs, fixed = T)){
QEName = sub('.r', '', lQEs)
}
sFileToSavePng = paste(QEFolders[iCounterQEFolders], paste(QEName,".png", sep = ""), sep = "/")
png(filename = sFileToSavePng,
width = PictureWidth, height = PictureHeight, units = Pictureunits, pointsize = PicturePtSize,
bg = "white", res = NA, family = "")
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
dev.off()
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
iCounterQEFolders = 13
lQEs = list.files(path = QEFolders[iCounterQEFolders])
lQEs = c(lQEs[grep(".R", lQEs, fixed = T)], lQEs[grep(".r", lQEs, fixed = T)])
if(length(lQEs) > 1){
stop('Too many Quantlets in folder')
}
lIndTRUE = grepl('TRUE', lQEs, fixed = T)
if (grepl('.R', lQEs, fixed = T)){
QEName = sub('.R', '', lQEs)}
if (grepl('.r', lQEs, fixed = T)){
QEName = sub('.r', '', lQEs)
}
sFileToSavePng = paste(QEFolders[iCounterQEFolders], paste(QEName,".png", sep = ""), sep = "/")
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
bbox3d(back = "lines", front = "solid") # define drawing modes
graphics.off()
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
bbox3d(back = "lines", front = "solid") # define drawing modes
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
bbox3d(back = "filled", front = "solid") # define drawing modes
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
bbox3d(back = "lines", front = "solid") # define drawing modes
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
# surface3d
x = y = seq(-9,9)                       # define coordinates for the x and y axes
f = function(x,y) (x^2 - y^2)/10        # defines the function to compute the z values depending on x and y
z = outer(x, y, f)                      # compute the z values for the grid of x and y
open3d()                                # open 3D device
surface3d(x, y, z, back = "lines",
col = rainbow(1000), alpha = 0.9)       # define color and transparency level
iCounterQEFolders = 14
lQEs = list.files(path = QEFolders[iCounterQEFolders])
lQEs = c(lQEs[grep(".R", lQEs, fixed = T)], lQEs[grep(".r", lQEs, fixed = T)])
if(length(lQEs) > 1){
stop('Too many Quantlets in folder')
}
lIndTRUE = grepl('TRUE', lQEs, fixed = T)
if (grepl('.R', lQEs, fixed = T)){
QEName = sub('.R', '', lQEs)}
if (grepl('.r', lQEs, fixed = T)){
QEName = sub('.r', '', lQEs)
}
sFileToSavePng = paste(QEFolders[iCounterQEFolders], paste(QEName,".png", sep = ""), sep = "/")
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
lQEs[1]
iCounterQEFolders = 15
lQEs = list.files(path = QEFolders[iCounterQEFolders])
lQEs = c(lQEs[grep(".R", lQEs, fixed = T)], lQEs[grep(".r", lQEs, fixed = T)])
if(length(lQEs) > 1){
stop('Too many Quantlets in folder')
}
lIndTRUE = grepl('TRUE', lQEs, fixed = T)
if (grepl('.R', lQEs, fixed = T)){
QEName = sub('.R', '', lQEs)}
if (grepl('.r', lQEs, fixed = T)){
QEName = sub('.r', '', lQEs)
}
sFileToSavePng = paste(QEFolders[iCounterQEFolders], paste(QEName,".png", sep = ""), sep = "/")
source(paste(QEFolders[iCounterQEFolders], lQEs[1], sep = '/'), echo = T)
# make sure the package is installed
# install.packages("lattice")
# install.packages("rgl")
library(lattice)
library(rgl)
graphics.off()
# Four-dimensional plot levelplot
levelplot(yield ~ site * variety | year,
data = barley, scales = list(alternating = T),
shrink = c(0.3, 1), region = TRUE, cuts = 20,
col.regions = topo.colors (100),
par.settings=list(axis.text=list(cex=0.5)),
par.strip.text=list(cex=0.7), between=list(x=1),
aspect = "iso", colorkey = list(space = "top"))
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
# make sure the package is installed
# install.packages("lattice")
# install.packages("rgl")
library(lattice)
library(rgl)
graphics.off()
# Four-dimensional plot levelplot
levelplot(yield ~ site * variety | year,
data = barley, scales = list(alternating = T),
shrink = c(0.3, 1), region = TRUE, cuts = 20,
col.regions = topo.colors (100),
par.settings=list(axis.text=list(cex=0.5)),
par.strip.text=list(cex=0.7), between=list(x=1),
aspect = "iso", colorkey = list(space = "top"))
# Load tcltk and rpanel packages (have to be installed)
library(tcltk)
library(rpanel)
# Load the trees data (included in R)
attach(trees)
# Define action function that is later called by the control panel
data.plotfn <- function(panel) {
if (panel$plot.type == "histogram")     # if the variable plot.type equals "histogram"
hist(panel$y)                           # then plot histogram of the variable panel$y
else if (panel$plot.type == "boxplot")  # if the variable plot.type equals "boxplot"
boxplot(panel$y)                        # plot boxplot of the variable panel$y
panel
}
# Create the control panel
panel <- rp.control(y = Height)         # define Height to be the variable used by action function
# Add a listbox to the control panel
rp.listbox(panel,
plot.type,
c("histogram", "boxplot"),
action = data.plotfn,
title = "Plot type")                    # add a title to the listbox
tidy_source(comments = TRUE, indent = 4)
# Load tcltk and rpanel packages (have to be installed)
library(tcltk)
library(rpanel)
# Load the trees data (included in R)
attach(trees)
# Define action function that is later called by the control panel
data.plotfn = function(panel){
if (panel$plot.type == "histogram")     # if the variable plot.type equals "histogram"
hist(panel$y)                           # then plot histogram of the variable panel$y
else if (panel$plot.type == "boxplot")  # if the variable plot.type equals "boxplot"
boxplot(panel$y)                        # plot boxplot of the variable panel$y
panel
}
# Create the control panel
panel <- rp.control(y = Height)         # define Height to be the variable used by action function
# Add a listbox to the control panel
rp.listbox(panel,
plot.type,
c("histogram", "boxplot"),
action = data.plotfn,
title = "Plot type")                    # add a title to the listbox
tidy_source(source = sFileToWriteBody, comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
# margins (bottom, left, top, right)
par(mai = c(b = 0.01, l = 1e-04, t = 0.01, r = 0.1))
# Box-plot located at x=0.8 without frame, with default 1.5 range and outliers
boxplot(nhtemp, at = 0.8, frame = F, range = 1.5, outline = T, yaxt = "n", ylim = c(48, 55))
# Add a y axis
axis(2, pos = 0.5, col.axis = "black", las = 0)
# compute the quartiles and lower&upper fence
lowq = quantile(nhtemp, probs = 0.25)
median = quantile(nhtemp, probs = 0.5)
uppq = quantile(nhtemp, probs = 0.75)
lowerfence = lowq - 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
upperfence = uppq + 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
# Compute the endpoint of each whisker, e.g. the max/min value still within the upper/lower-fence
lowerwhisker = min(nhtemp[nhtemp > lowerfence])
upperwhisker = max(nhtemp[nhtemp < upperfence])
# write description in the Box-Plot
text(1.2, lowq, expression("lower quartile: x"[0.25]), font = 2)
text(1.2, median, expression("median: med x"), font = 2)
text(1.2, uppq, expression("upper quartile: x"[0.75]), font = 2)
text(1.2, upperwhisker, "upper whisker", font = 1)
text(1.2, lowerwhisker, "lower whisker", font = 1)
# margins (bottom, left, top, right)
par(mai = c(b = 0.01, l = 1e-04, t = 0.01, r = 0.1))
# Box-plot located at x=0.8 without frame, with default 1.5 range and outliers
boxplot(nhtemp, at = 0.8, frame = F, range = 1.5, outline = T, yaxt = "n", ylim = c(48, 55))
# Add a y axis
axis(2, pos = 0.5, col.axis = "black", las = 0)
# compute the quartiles and lower&upper fence
lowq = quantile(nhtemp, probs = 0.25)
median = quantile(nhtemp, probs = 0.5)
uppq = quantile(nhtemp, probs = 0.75)
lowerfence = lowq - 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
upperfence = uppq + 1.5 * (diff(quantile(nhtemp, probs = c(0.25, 0.75))))
# Compute the endpoint of each whisker, e.g. the max/min value still within the upper/lower-fence
lowerwhisker = min(nhtemp[nhtemp > lowerfence])
upperwhisker = max(nhtemp[nhtemp < upperfence])
# write description in the Box-Plot
text(1.2, lowq, expression("lower quartile: x"[0.25]), font = 2)
text(1.2, median, expression("median: med x"), font = 2)
text(1.2, uppq, expression("upper quartile: x"[0.75]), font = 2)
text(1.2, upperwhisker, "upper whisker", font = 1)
text(1.2, lowerwhisker, "lower whisker", font = 1)
tidy_source(comments = TRUE, indent = 4)
# creating values a as a sequence from -3 to 3
a = seq(from = -3, to = 3, by = 0.01)
# calculating the densities of these values given the default mean=0 sd=1 normal distribution
b = dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai = c(b = 0.5, l = 0.5, t = 0.5, r = 0.5), font = 4, cex.axis = 1.5)
# axis numeration switched off, line width=2
plot(x = a, y = b, type = "l", ylab = "", xlab = "", axes = F, lwd = "2")
# 2 horizontal lines
abline(h = 0)
abline(v = -1.5, lty = 2)
# create and label x-axis
axis(1, at = -1.5, labels = expression(z[alpha]))
# Filling LEFT
polygon(x = c(-1.5, a[1:151]), y = c(0, 0, b[2:151]), col = "gray94")
# write alpha in the area of interest
text(-1.8, 0.03, expression(alpha), cex = 1.2)
#creating values a as a sequence from -3 to 3
a=seq(from=-3,to=3,by=0.01)
#calculating the densities of these values given the default mean=0 sd=1
#normal distribution
b=dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai=c(b=0.5,l=0.5,t=0.5,r=0.5), font=4, cex.axis=1.5)
# axis numeration switched off, line width=2
plot(x=a,y=b,type='l', ylab="",xlab="", axes=F, lwd="2")
# 2 horizontal lines
abline(h=0)
abline(v=1.5, lty=2)
# create and label x-axis
axis(1, at=1.5, labels=expression(z[1-alpha]))
#Filling LEFT
polygon(x=c(1.5,rev(a[451:601])), y=c(0,0,rev(b[452:601])),col="gray94")
#write alpha in the area of interest
text(1.8,0.03,expression(alpha), cex=1.2)
tidy_source(comments = TRUE, indent = 4)
#creating values a as a sequence from -3 to 3
a=seq(from=-3,to=3,by=0.01)
#calculating the densities of these values given the default mean=0 sd=1
#normal distribution
b=dnorm(a)
# margins (bottom,left,top,right) , font style, axis label size
par(mai=c(b=0.5,l=0.5,t=0.5,r=0.5), font=4, cex.axis=1.5)
# axis switched off, line width=2
plot(x=a,y=b,type='l', ylab="",xlab="", axes=F, lwd="2")
# 3 vertical lines
abline(h=0)
abline(v=-1.5, lty=2)
abline(v=1.5, lty=2)
# Create and the x-axis, cex for text size
axis(1, at=c(-1.5,1.5), labels=expression(-z[1-frac(alpha,2)]==z[frac(alpha,2)],z[1-frac(alpha,2)]), font=2, cex=2)
# Filling LEFT
polygon(x=c(-1.5,a[1:151]), y=c(0,0,b[2:151]),col="gray94")
# Filling RIGHT
polygon(x=c(1.5,rev(a[451:601])), y=c(0,0,rev(b[452:601])),col="gray94")
# Write alphas in the area of interest
text(-1.8,0.03,expression(frac(alpha,2)), cex=1.1)
text(1.8,0.03,expression(frac(alpha,2)), cex=1.1)
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
# ecdf of Formaldehyde$car is a step function
ecdf(Formaldehyde$car)
d = ecdf(Formaldehyde$car)
# axis label setup & margins (bottom, top, left, right)
par(cex.lab = 1.5, mai = c(b = 1, l = 1, t = 0.5, r = 0.5))
# plot ECDF
plot(d, ylab = expression(hat(F)(x)), xlab = "x", main = "")
# Vertical line at Fhat(0.5)
abline(v = 0.5, lty = 2, lwd = 2)
text(0.71, 0.51, expression(hat(F)(0.5)), cex = 1.2)
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab=1.5, mai=c(b=1,l=1,t=0.7,r=0.5))
# histogram with relative frequencies
hist(nhtemp,freq=F,main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))
tidy_source(comments = TRUE, indent = 4)
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab = 1.5, mai = c(b = 1, l = 1, t = 0.7, r = 0.5))
# histogram with relative frequencies
hist(nhtemp, freq = F, main = "", ylab = expression(hat(f)(x)), xlab = expression(x %in% K[i]))
# setting up the axis label size and margin (bottom, left, top, right)
par(cex.lab=1.5, mai=c(b=1,l=1,t=0.7,r=0.5))
# histogram with relative frequencies with manual setting of intervals
hist(nhtemp,freq=F,breaks=seq(from=47, to=55, by=0.5),main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))
tidy_source(comments = TRUE, indent = 4)
tidy_source(comments = TRUE, indent = 4)
#In order to use the variable of the 'longley' data (available data set in R) directly use attach()
attach(longley)
#plotting 'Gross national Product' against the 'number of employed people'
# col=" " specifies the color of the dots and pch specifies the dots
plot(Employed, GNP, col="red",pch=16)
#adding a least-square regression line to the plot; the function lm is used to calculate a linear model
abline(lm(GNP~Employed), col="blue")
#using a grid ; specifying strength of grid with 'lwd= '
grid(lwd=2);
#In order to use the variable of the 'longley' data (available data set in R) directly use attach()
attach(longley)
#plotting 'Gross national Product' against the 'number of employed people'
# col=" " specifies the color of the dots and pch specifies the dots
plot(Employed, GNP, col="red",pch=16)
#adding a least-square regression line to the plot; the function lm is used to calculate a linear model
abline(lm(GNP~Employed), col="blue")
#using a grid ; specifying strength of grid with 'lwd= '
grid(lwd=2)
hist(nhtemp,freq=F,breaks=seq(from=47, to=55, by=0.5),main="",ylab=expression(hat(f)(x)),xlab=expression(x %in% K[i]))# margins (bottom, left, top, right)
par(mai=c(b=0.01,l=1,t=0.01,r=0.9))
#Pie-Chart with axis text size=1.8
pie(table(chickwts$feed), cex=1.8)
# margins (bottom, left, top, right)
par(mai=c(b=0.01,l=1,t=0.01,r=0.9))
#Pie-Chart with axis text size=1.8
pie(table(chickwts$feed), cex=1.8)
tidy_source(comments = TRUE, indent = 4)
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
for(iCounterQEs in 60:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
sPathFile
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
sPathFile
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
for(iCounterQEs in 61:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
lQEs[iCounterQEs]
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
iCounterQEs
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 62:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
iCounterQEs
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 60:iNbQEs){
sPathFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sPathFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 60:iNbQEs){
sFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sFile, comments = TRUE, indent = 4)
close(file(sPathFile))
}
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
iCounterQEs
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 60:iNbQEs){
sFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sFile, comments = TRUE, indent = 4)
close(file(sFile))
}
# Cleaning up all quantlets in a folder
rm(list = ls())
require(formatR)
require(stringr)
require(stringi)
sPathRoot = "C:/Users/Christoph/Documents/GitHub/BCS/BCS"
setwd(sPathRoot)
lQEs = list.dirs(path = ".")
lQEs = lQEs[grep("BCS_", lQEs, fixed = T)]
iNbQEs = length(lQEs)
for(iCounterQEs in 1:iNbQEs){
sFile = paste(sPathFile = sub('./', '', lQEs[iCounterQEs]), '.r', sep ='')
setwd(paste(sPathRoot, sub('./', '', lQEs[iCounterQEs]), sep = '/', collapse = ''))
tidy_source(source = sFile, comments = TRUE, indent = 4)
close(file(sFile))
}
source('~/GitHub/BCS/BCS/Format all Quantlets.R')
iCounterQEs
